// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/proto/wallet_storage_ds/wallet_storage_ds.proto

package wallet_storage_ds

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletStorageArmClient is the client API for WalletStorageArm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletStorageArmClient interface {
	ConsumerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConsumerItems, error)
	ConsumerCreate(ctx context.Context, in *ConsumerCreateRequest, opts ...grpc.CallOption) (*ConsumerCreateResponse, error)
	ConsumerRead(ctx context.Context, in *EntityId, opts ...grpc.CallOption) (*ConsumerItems, error)
	ConsumerUpdate(ctx context.Context, in *ConsumerUpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ConsumerDelete(ctx context.Context, in *EntityId, opts ...grpc.CallOption) (*StatusResponse, error)
	MethodList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MethodListResponse, error)
}

type walletStorageArmClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletStorageArmClient(cc grpc.ClientConnInterface) WalletStorageArmClient {
	return &walletStorageArmClient{cc}
}

func (c *walletStorageArmClient) ConsumerList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConsumerItems, error) {
	out := new(ConsumerItems)
	err := c.cc.Invoke(ctx, "/wallet_storage_ds.WalletStorageArm/ConsumerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageArmClient) ConsumerCreate(ctx context.Context, in *ConsumerCreateRequest, opts ...grpc.CallOption) (*ConsumerCreateResponse, error) {
	out := new(ConsumerCreateResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage_ds.WalletStorageArm/ConsumerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageArmClient) ConsumerRead(ctx context.Context, in *EntityId, opts ...grpc.CallOption) (*ConsumerItems, error) {
	out := new(ConsumerItems)
	err := c.cc.Invoke(ctx, "/wallet_storage_ds.WalletStorageArm/ConsumerRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageArmClient) ConsumerUpdate(ctx context.Context, in *ConsumerUpdateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage_ds.WalletStorageArm/ConsumerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageArmClient) ConsumerDelete(ctx context.Context, in *EntityId, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage_ds.WalletStorageArm/ConsumerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageArmClient) MethodList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MethodListResponse, error) {
	out := new(MethodListResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage_ds.WalletStorageArm/MethodList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletStorageArmServer is the server API for WalletStorageArm service.
// All implementations must embed UnimplementedWalletStorageArmServer
// for forward compatibility
type WalletStorageArmServer interface {
	ConsumerList(context.Context, *empty.Empty) (*ConsumerItems, error)
	ConsumerCreate(context.Context, *ConsumerCreateRequest) (*ConsumerCreateResponse, error)
	ConsumerRead(context.Context, *EntityId) (*ConsumerItems, error)
	ConsumerUpdate(context.Context, *ConsumerUpdateRequest) (*StatusResponse, error)
	ConsumerDelete(context.Context, *EntityId) (*StatusResponse, error)
	MethodList(context.Context, *empty.Empty) (*MethodListResponse, error)
	mustEmbedUnimplementedWalletStorageArmServer()
}

// UnimplementedWalletStorageArmServer must be embedded to have forward compatible implementations.
type UnimplementedWalletStorageArmServer struct {
}

func (UnimplementedWalletStorageArmServer) ConsumerList(context.Context, *empty.Empty) (*ConsumerItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerList not implemented")
}
func (UnimplementedWalletStorageArmServer) ConsumerCreate(context.Context, *ConsumerCreateRequest) (*ConsumerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerCreate not implemented")
}
func (UnimplementedWalletStorageArmServer) ConsumerRead(context.Context, *EntityId) (*ConsumerItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerRead not implemented")
}
func (UnimplementedWalletStorageArmServer) ConsumerUpdate(context.Context, *ConsumerUpdateRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerUpdate not implemented")
}
func (UnimplementedWalletStorageArmServer) ConsumerDelete(context.Context, *EntityId) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerDelete not implemented")
}
func (UnimplementedWalletStorageArmServer) MethodList(context.Context, *empty.Empty) (*MethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodList not implemented")
}
func (UnimplementedWalletStorageArmServer) mustEmbedUnimplementedWalletStorageArmServer() {}

// UnsafeWalletStorageArmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletStorageArmServer will
// result in compilation errors.
type UnsafeWalletStorageArmServer interface {
	mustEmbedUnimplementedWalletStorageArmServer()
}

func RegisterWalletStorageArmServer(s grpc.ServiceRegistrar, srv WalletStorageArmServer) {
	s.RegisterService(&WalletStorageArm_ServiceDesc, srv)
}

func _WalletStorageArm_ConsumerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageArmServer).ConsumerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage_ds.WalletStorageArm/ConsumerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageArmServer).ConsumerList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorageArm_ConsumerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageArmServer).ConsumerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage_ds.WalletStorageArm/ConsumerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageArmServer).ConsumerCreate(ctx, req.(*ConsumerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorageArm_ConsumerRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageArmServer).ConsumerRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage_ds.WalletStorageArm/ConsumerRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageArmServer).ConsumerRead(ctx, req.(*EntityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorageArm_ConsumerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageArmServer).ConsumerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage_ds.WalletStorageArm/ConsumerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageArmServer).ConsumerUpdate(ctx, req.(*ConsumerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorageArm_ConsumerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageArmServer).ConsumerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage_ds.WalletStorageArm/ConsumerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageArmServer).ConsumerDelete(ctx, req.(*EntityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorageArm_MethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageArmServer).MethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage_ds.WalletStorageArm/MethodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageArmServer).MethodList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletStorageArm_ServiceDesc is the grpc.ServiceDesc for WalletStorageArm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletStorageArm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet_storage_ds.WalletStorageArm",
	HandlerType: (*WalletStorageArmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumerList",
			Handler:    _WalletStorageArm_ConsumerList_Handler,
		},
		{
			MethodName: "ConsumerCreate",
			Handler:    _WalletStorageArm_ConsumerCreate_Handler,
		},
		{
			MethodName: "ConsumerRead",
			Handler:    _WalletStorageArm_ConsumerRead_Handler,
		},
		{
			MethodName: "ConsumerUpdate",
			Handler:    _WalletStorageArm_ConsumerUpdate_Handler,
		},
		{
			MethodName: "ConsumerDelete",
			Handler:    _WalletStorageArm_ConsumerDelete_Handler,
		},
		{
			MethodName: "MethodList",
			Handler:    _WalletStorageArm_MethodList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/wallet_storage_ds/wallet_storage_ds.proto",
}
