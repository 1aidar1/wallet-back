// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/proto/wallet_storage/wallet_storage.proto

package wallet_storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletStorageClient is the client API for WalletStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletStorageClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	HistoryByProvider(ctx context.Context, in *HistoryByProviderRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Unblock(ctx context.Context, in *UnblockRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Identification(ctx context.Context, in *IdentificationRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Refill(ctx context.Context, in *RefillRequest, opts ...grpc.CallOption) (*RefillResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Hold(ctx context.Context, in *HoldRequest, opts ...grpc.CallOption) (*HoldResponse, error)
	Unhold(ctx context.Context, in *UnholdRequest, opts ...grpc.CallOption) (*UnholdResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	Refund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (*TransactionInfoResponse, error)
}

type walletStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletStorageClient(cc grpc.ClientConnInterface) WalletStorageClient {
	return &walletStorageClient{cc}
}

func (c *walletStorageClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) HistoryByProvider(ctx context.Context, in *HistoryByProviderRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/HistoryByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Unblock(ctx context.Context, in *UnblockRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Unblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Identification(ctx context.Context, in *IdentificationRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Identification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Refill(ctx context.Context, in *RefillRequest, opts ...grpc.CallOption) (*RefillResponse, error) {
	out := new(RefillResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Refill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Hold(ctx context.Context, in *HoldRequest, opts ...grpc.CallOption) (*HoldResponse, error) {
	out := new(HoldResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Hold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Unhold(ctx context.Context, in *UnholdRequest, opts ...grpc.CallOption) (*UnholdResponse, error) {
	out := new(UnholdResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Unhold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Refund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletStorageClient) TransactionInfo(ctx context.Context, in *TransactionInfoRequest, opts ...grpc.CallOption) (*TransactionInfoResponse, error) {
	out := new(TransactionInfoResponse)
	err := c.cc.Invoke(ctx, "/wallet_storage.WalletStorage/TransactionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletStorageServer is the server API for WalletStorage service.
// All implementations must embed UnimplementedWalletStorageServer
// for forward compatibility
type WalletStorageServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	HistoryByProvider(context.Context, *HistoryByProviderRequest) (*HistoryResponse, error)
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	Close(context.Context, *CloseRequest) (*StatusResponse, error)
	Block(context.Context, *BlockRequest) (*StatusResponse, error)
	Unblock(context.Context, *UnblockRequest) (*StatusResponse, error)
	Identification(context.Context, *IdentificationRequest) (*StatusResponse, error)
	Refill(context.Context, *RefillRequest) (*RefillResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Hold(context.Context, *HoldRequest) (*HoldResponse, error)
	Unhold(context.Context, *UnholdRequest) (*UnholdResponse, error)
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	Refund(context.Context, *RefundRequest) (*RefundResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	TransactionInfo(context.Context, *TransactionInfoRequest) (*TransactionInfoResponse, error)
	mustEmbedUnimplementedWalletStorageServer()
}

// UnimplementedWalletStorageServer must be embedded to have forward compatible implementations.
type UnimplementedWalletStorageServer struct {
}

func (UnimplementedWalletStorageServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWalletStorageServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedWalletStorageServer) History(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedWalletStorageServer) HistoryByProvider(context.Context, *HistoryByProviderRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryByProvider not implemented")
}
func (UnimplementedWalletStorageServer) Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedWalletStorageServer) Close(context.Context, *CloseRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedWalletStorageServer) Block(context.Context, *BlockRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedWalletStorageServer) Unblock(context.Context, *UnblockRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unblock not implemented")
}
func (UnimplementedWalletStorageServer) Identification(context.Context, *IdentificationRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Identification not implemented")
}
func (UnimplementedWalletStorageServer) Refill(context.Context, *RefillRequest) (*RefillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refill not implemented")
}
func (UnimplementedWalletStorageServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWalletStorageServer) Hold(context.Context, *HoldRequest) (*HoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hold not implemented")
}
func (UnimplementedWalletStorageServer) Unhold(context.Context, *UnholdRequest) (*UnholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unhold not implemented")
}
func (UnimplementedWalletStorageServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedWalletStorageServer) Refund(context.Context, *RefundRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedWalletStorageServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedWalletStorageServer) TransactionInfo(context.Context, *TransactionInfoRequest) (*TransactionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInfo not implemented")
}
func (UnimplementedWalletStorageServer) mustEmbedUnimplementedWalletStorageServer() {}

// UnsafeWalletStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletStorageServer will
// result in compilation errors.
type UnsafeWalletStorageServer interface {
	mustEmbedUnimplementedWalletStorageServer()
}

func RegisterWalletStorageServer(s grpc.ServiceRegistrar, srv WalletStorageServer) {
	s.RegisterService(&WalletStorage_ServiceDesc, srv)
}

func _WalletStorage_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_HistoryByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryByProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).HistoryByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/HistoryByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).HistoryByProvider(ctx, req.(*HistoryByProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Unblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Unblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Unblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Unblock(ctx, req.(*UnblockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Identification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Identification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Identification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Identification(ctx, req.(*IdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Refill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Refill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Refill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Refill(ctx, req.(*RefillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Hold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Hold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Hold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Hold(ctx, req.(*HoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Unhold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Unhold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Unhold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Unhold(ctx, req.(*UnholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Refund(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletStorage_TransactionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletStorageServer).TransactionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_storage.WalletStorage/TransactionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletStorageServer).TransactionInfo(ctx, req.(*TransactionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletStorage_ServiceDesc is the grpc.ServiceDesc for WalletStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet_storage.WalletStorage",
	HandlerType: (*WalletStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WalletStorage_Create_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _WalletStorage_Info_Handler,
		},
		{
			MethodName: "History",
			Handler:    _WalletStorage_History_Handler,
		},
		{
			MethodName: "HistoryByProvider",
			Handler:    _WalletStorage_HistoryByProvider_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _WalletStorage_Statistics_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _WalletStorage_Close_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _WalletStorage_Block_Handler,
		},
		{
			MethodName: "Unblock",
			Handler:    _WalletStorage_Unblock_Handler,
		},
		{
			MethodName: "Identification",
			Handler:    _WalletStorage_Identification_Handler,
		},
		{
			MethodName: "Refill",
			Handler:    _WalletStorage_Refill_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _WalletStorage_Withdraw_Handler,
		},
		{
			MethodName: "Hold",
			Handler:    _WalletStorage_Hold_Handler,
		},
		{
			MethodName: "Unhold",
			Handler:    _WalletStorage_Unhold_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _WalletStorage_Clear_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _WalletStorage_Refund_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _WalletStorage_Transfer_Handler,
		},
		{
			MethodName: "TransactionInfo",
			Handler:    _WalletStorage_TransactionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/wallet_storage/wallet_storage.proto",
}
